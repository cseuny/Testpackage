install.packages(c("data.table", "ggplot2", "plotly", "plyr", "rmarkdown", "roxygen2", "tidyselect", "tm"))
install.packages(c("jsonlite", "yaml"))
library(devtools)
use_vignette("model_details")
library(readr)
library(dplyr)
#' @return The data is returned as a data frame.
#'
#' @importFrom readr read_csv
#'
#' @importFrom dplyr tbl_df
#'
#' @examples
#' fars_read("fars_data.zip")
#'
#' @export
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
file.path("~", "Desktop", "R")
file.path("~", "Desktop", "R", "Mastering software developement in R")
file.path("~", "Desktop", "R", "Mastering software development in R", "Building R packges")
datafile <- file.path("~", "Desktop", "R", "Mastering software development in R", "Building R packges")
class(datafile)
datafile
path.expand("~")
path.expand(file.path("~", datafile))
c(datafile, "fars_data.zip")
datafile <- file.path("~", "Desktop", "R", "Mastering software development in R", "Building R packges", "fars_data.zip")
fars_read(datafile)
datafile <-path.expand("~")
datafile
datafile <-path.expand("~", "accident_2013.csv.bz2")
datafile <-path.expand(file.path("~", "accident_2013.csv.bz2")
)
fars_read(datafile)
datafile <- c("â€ªC:\Users\Home\Desktop\accident_2013.csv.bz2")
datafile <-path.expand(file.path("~", "Desktop", accident_2013.csv.bz2")
)
fars_read(datafile)
datafile <-path.expand(file.path("~", "Desktop", accident_2013.csv.bz2"))
)
datafile <-path.expand(file.path("~", "Desktop", "accident_2013.csv.bz2"))
fars_read(datafile)
Sys.info()['sysname']
read.csv(datafile)
datafile <- c("C:/Users/Home/Desktop/accident_2013.csv.bz")
read.csv(datafile)
datafile <- c("C:/Users/Home/Desktop/accident_2013.csv.bz2")
read.csv(datafile)
path.expand("~")
datafile <- c("C:/Users/Home/Desktop/data/accident_2013.csv.bz2")
read.csv(datafile)
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
make_filename(2013)
fars_read(make_filename(2013))
fars_read(make_filename(2013))
#'
#' @importFrom dplyr mutate select
#'
#' @importFrom magrittr %>%
#'
#' @examples
#' fars_read_years(2000)
#' fars_read_years(c(2000, 2002, 2004))
#'
#' @export
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(2013)
#'
#' @importFrom dplyr bind_rows group_by summarize
#'
#' @importFrom tidyr spread
#'
#' @examples
#'fars_summarize_years(2000)
#'fars_summairze_years(2000:2002)
#'
#'@export
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
#'
#'@importFrom dplyr filter
#'
#'@importFrom maps map
#'
#'@importFrom graphics points
#'
#'@example
#'fars_map_state(01, 2000)
#'@export
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
fars_summarize_years(2013)
library(maps)
fars_map_state(01, 2013)
fars_summarize_years(2013:2015)
fars_map_state(52, 2013)
fars_map_state(50, 2013)
fars_map_state(51, 2013)
fars_map_state(50:51, 2013)
fars_map_state(51, 2013:2014)
library(readr)
library(dplyr)
#'
#' @return The data is returned as a data frame.
#'
#' @importFrom readr read_csv
#'
#' @importFrom dplyr tbl_df
#'
#' @examples
#' fars_read(make_filename(2013))
#'
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
#' Returns a file name "accident_year.csv.bz2" with year is specified by a
#' user (using the \code{year} argument).
#'
#' @param year A specific year
#'
#' @return This function returns a string of file name.
#'
#' @example
#' make_filename(2013)
#'
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
#' gives a "invalid year:" warning and returns NULL.
#'
#' @importFrom dplyr mutate select
#'
#' @importFrom magrittr %>%
#'
#' @examples
#' fars_read_years(2013)
#' fars_read_years(c(2013, 2014, 2015))
#'
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
#'
#' @importFrom dplyr bind_rows group_by summarize
#'
#' @importFrom tidyr spread
#'
#' @examples
#'fars_summarize_years(2013)
#'fars_summairze_years(2013:2015)
#'
#'@export
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
library(maps)
library(graphics)
#'@importFrom dplyr filter
#'
#'@importFrom maps map
#'
#'@importFrom graphics points
#'
#'@example
#'fars_map_state(01, 2013)
#'
#'@export
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
fars_summarize_years(2013)
fars_summarize_years(2013:2015)
fars_summarize_years(2013)
fars_summarize_years(2013)
library(devtools)
library(testthat)
?test_that
class(fars_map_state(01, 2013))
str(fars_map_state(01, 2013))
class(fars_summarize_years(2013))
expect_that(fars_map_state(01, 2013), is_a("tbl_df"))
expect_that(fars_map_state(01, 2013), is_a(tbl_df))
str(fars_summarize_years(2013))
?is_a
?is_a()
?inherits
expect_that(fars_summarize_years(2013), is_a("tbl_df"))
install.packages(c("knitr", "markdown"))
library(devtools)
load_all()
?document
document()
document()
rm(list = c("fars_map_state", "fars_summarize_years"))
load_all()
document()
?use_package
use_package("Week4", type = "Imports")
load_all()
check()
load_all()
load_all()
use_package('dplyr')
use_package('magrittr')
use_package('maps')
use_package('readr')
use_package('tidyr')
library(testthat)
library(testthat)
load_all()
expect_that(fars_summarize_years(01, 2013), is_a("tbl_df"))
expect_that(fars_summarize_years(2013), is_a("tbl_df"))
fars_summarize_years(2013)
fars_read_years(2013)
?summarize
fars_read_years(2013)
fars_summarize_years(2013)
?n()
fars_summarize_years(2013:2015)
library(dplyr)
fars_summarize_years(2013:2015)
dplyr::n()
dplyr::summarise()
?dplyr::summarise
?dplyr::n
expect_that(fars_summarize_years(2013), is_a("tbl_df"))
#'
#' @importFrom dplyr bind_rows group_by summarize n
#'
#' @importFrom tidyr spread
#'
#' @examples
#'fars_summarize_years(2013)
#'fars_summairze_years(2013:2015)
#'
#'@export
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = dplyr::n()) %>%
tidyr::spread(year, n)
}
fars_summarize_years(2013:2015)
install.packages("testthat")
find.package("testthat")
load_all
load_all()
library(devtools)
load_all()
rm(list = c("fars_summarize_years"))
load_all()
fars_map_state(01, 2013)
system.file("exdata", "accident_2013.csv.bz2", package = Week4)
system.file("exdata", "accident_2013.csv.bz2", package = "Week4")
temp <- system.file("exdata", "accident_2013.csv.bz2", package = "Week4")
fars_read(temp)
usethis::use_github_action("check-release")
